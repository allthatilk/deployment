---
# Clone the iati-website git repository as the specified user
- include_role:
    name: common/clone_repo
  become: true
  become_user: "{{ custom_user }}"


# Copy the local.py file to the remote server for Django settings
- include_tasks: setup_local_settings.yml

# Install packages specified in the requirements.txt file to the virtualenv
- include_role:
    name: common/pip_install

# Setup database user with correct privileges and password
- include_tasks: django_postgres_setup.yml

# Run migrate on the database and make sure directories necessary for static content and media exist
- include_tasks: django_setup.yml

- include_tasks: ssl_setup.yml

- include_role:
    name: common/apache2/apache2_install

- include_role:
    name: common/apache2/apache2_restart

# Ensure the db user cron can access the custom user path (to run the postgres_backup_cron)
# If multiple services require this in the future (just wagtail and datastore for now), extract it as a role
- cron:
    name: PATH
    env: yes
    user: "{{ db_user }}"
    value: /usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# Create the cron job that regularly backs up the postgres database
# See the README for further information on how this works
# - include_role:
#     name: common/postgres/postgres_backup_cron

# The role that installs S3 and creates a default object storage bucket
- include_role:
    name: common/s3

# The role that writes the postgres_recover_backup.sh from template. See README for more details.
- include_role:
    name: common/postgres/postgres_setup_recovery
